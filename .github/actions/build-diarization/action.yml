name: 'Build Diarization System'
description: 'Build enhanced multi-speaker diarization system'
inputs:
  platform:
    description: 'Platform to build for (windows, macos, linux)'
    required: true
  arch:
    description: 'Architecture to build for (x64, arm64)'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Build diarization system
      shell: bash
      run: |
        echo "üé≠ Building enhanced multi-speaker diarization system for ${{ inputs.platform }}..."
        
        if [ -f ".github/scripts/build-diarization.sh" ]; then
          ./.github/scripts/build-diarization.sh "${{ inputs.platform }}" "${{ inputs.arch }}"
        elif npm run build:diarization --if-present; then
          echo "‚úÖ Diarization built via npm script"
        else
          echo "‚ö†Ô∏è No diarization build script found - will use fallback"
        fi

    - name: Verify diarization build
      shell: bash
      run: |
        DIARIZE_BIN="binaries/diarize-cli"
        if [ "${{ inputs.platform }}" = "windows" ]; then
          DIARIZE_BIN="binaries/diarize-cli.exe"
        fi
        
        if [ -f "$DIARIZE_BIN" ]; then
          echo "‚úÖ Diarization binary found: $DIARIZE_BIN"
          chmod +x "$DIARIZE_BIN" 2>/dev/null || true
          ls -la "$DIARIZE_BIN"
          
          if [ "${{ inputs.platform }}" != "windows" ]; then
            echo "üìä Binary size: $(ls -lh $DIARIZE_BIN | awk '{print $5}')"
          fi
          
          # Check for required models
          if [ -f "models/segmentation-3.0.onnx" ]; then
            echo "‚úÖ Segmentation model found"
          else
            echo "‚ö†Ô∏è Segmentation model missing"
          fi
          
          if [ -f "models/embedding-1.0.onnx" ]; then
            echo "‚úÖ Embedding model found"
          else
            echo "‚ö†Ô∏è Embedding model missing"
          fi
          
        else
          echo "‚ö†Ô∏è Diarization binary not found - single speaker mode only"
        fi
