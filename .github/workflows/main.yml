# .github/workflows/main.yml - FIXED VERSION with proper binary packaging
name: Build WhisperDesk for All Platforms

on:
  push:
    branches: [ main, release ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read
  checks: write
  pull-requests: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: darwin
            arch: x64
            artifact: WhisperDesk-mac-x64
            electron_arch: x64
            electron_target: --mac --x64
          - os: macos-latest
            platform: darwin
            arch: arm64
            artifact: WhisperDesk-mac-arm64
            electron_arch: arm64
            electron_target: --mac --arm64
          - os: ubuntu-latest
            platform: linux
            arch: x64
            artifact: WhisperDesk-linux-x64
            electron_arch: x64
            electron_target: --linux --x64
          - os: windows-latest
            platform: win32
            arch: x64
            artifact: WhisperDesk-windows-x64
            electron_arch: x64
            electron_target: --win --x64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest

    # Platform-specific dependencies
    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libasound2-dev
        sudo apt-get install -y fuse libfuse2

    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: |
        # Install Xcode command line tools if not present
        xcode-select --install || true
        # Install cmake via homebrew
        brew install cmake

    - name: Install Windows dependencies
      if: runner.os == 'Windows'
      run: |
        # Install Visual Studio Build Tools
        choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools" -y
        # Install cmake
        choco install cmake -y

    # Extract version from tag and update package.json
    - name: Set version from tag
      shell: bash
      run: |
        if [ "${{ github.ref_type }}" = "tag" ]; then
          # Extract version from tag (remove 'v' prefix)
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          
          echo "🏷️ Setting version to: $VERSION"
          
          # Update main package.json
          if command -v jq &> /dev/null; then
            # Use jq if available
            jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp && mv package.json.tmp package.json
          else
            # Fallback to sed
            sed -i.bak "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" package.json
          fi
          
          echo "✅ Updated main package.json version to: $VERSION"
          grep '"version"' package.json
          
          # Also set as environment variable for electron-builder
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
        else
          echo "🔧 Not a tag build, keeping existing version"
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "APP_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
        fi

    # Install main dependencies
    - name: Install main dependencies
      run: npm install

    # Install renderer dependencies
    - name: Install renderer dependencies
      shell: bash
      run: |
        cd src/renderer/whisperdesk-ui
        
        # Update renderer package.json version if this is a tag build
        if [ "${{ github.ref_type }}" = "tag" ]; then
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          
          echo "🏷️ Updating renderer package.json version to: $VERSION"
          
          if command -v jq &> /dev/null; then
            jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp && mv package.json.tmp package.json
          else
            sed -i.bak "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" package.json
          fi
          
          echo "✅ Updated renderer package.json version"
          grep '"version"' package.json
        fi
        
        pnpm install --frozen-lockfile

    # Build whisper.cpp from source - MODERN CMAKE APPROACH
    - name: Build whisper.cpp (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        echo "🔨 Building whisper.cpp with modern cmake approach..."
        
        # Clone whisper.cpp
        git clone https://github.com/ggerganov/whisper.cpp.git /tmp/whisper.cpp
        cd /tmp/whisper.cpp
        
        # Use modern cmake build approach (not make)
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release --parallel $(nproc 2>/dev/null || sysctl -n hw.ncpu || echo 4)
        
        # The binary should be in build/bin/whisper-cli
        echo "📋 Checking for built binary..."
        ls -la build/bin/ || echo "No build/bin directory"
        ls -la bin/ || echo "No bin directory"
        
        # Find the whisper-cli binary
        if [ -f "build/bin/whisper-cli" ]; then
          WHISPER_BINARY="build/bin/whisper-cli"
        elif [ -f "bin/whisper-cli" ]; then
          WHISPER_BINARY="bin/whisper-cli"
        else
          echo "❌ Could not find whisper-cli binary"
          echo "📋 Available files:"
          find . -name "*whisper*" -type f | head -10
          exit 1
        fi
        
        echo "✅ Found whisper binary at: $WHISPER_BINARY"
        
        # Copy to project binaries directory
        mkdir -p "$GITHUB_WORKSPACE/binaries"
        cp "$WHISPER_BINARY" "$GITHUB_WORKSPACE/binaries/whisper"
        chmod +x "$GITHUB_WORKSPACE/binaries/whisper"
        
        # Verify the binary works
        "$GITHUB_WORKSPACE/binaries/whisper" --help || echo "Binary test failed but continuing..."
        
        echo "✅ whisper.cpp built and installed successfully"

    - name: Build whisper.cpp (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "🔨 Building whisper.cpp for Windows with cmake..."
        
        # Clone whisper.cpp
        git clone https://github.com/ggerganov/whisper.cpp.git C:\temp\whisper.cpp
        Set-Location C:\temp\whisper.cpp
        
        # Use modern cmake build approach
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release --parallel
        
        # Find the whisper-cli binary
        $whisperBinary = $null
        if (Test-Path "build\bin\Release\whisper-cli.exe") {
            $whisperBinary = "build\bin\Release\whisper-cli.exe"
        } elseif (Test-Path "bin\Release\whisper-cli.exe") {
            $whisperBinary = "bin\Release\whisper-cli.exe"
        } elseif (Test-Path "build\Release\whisper-cli.exe") {
            $whisperBinary = "build\Release\whisper-cli.exe"
        } else {
            Write-Host "❌ Could not find whisper-cli.exe binary"
            Write-Host "📋 Available files in build:"
            Get-ChildItem -Recurse -Filter "*whisper*" | Select-Object FullName
            exit 1
        }
        
        Write-Host "✅ Found whisper binary at: $whisperBinary"
        
        # Copy to project binaries directory
        New-Item -ItemType Directory -Force -Path "$env:GITHUB_WORKSPACE\binaries"
        Copy-Item "$whisperBinary" "$env:GITHUB_WORKSPACE\binaries\whisper.exe" -Force
        
        Write-Host "✅ whisper.cpp built and installed successfully"

    # Download tiny model for inclusion
    - name: Download tiny model
      run: |
        mkdir -p models
        curl -L -o models/ggml-tiny.bin https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-tiny.bin

    # Build renderer
    - name: Build renderer
      run: |
        cd src/renderer/whisperdesk-ui
        pnpm run build

    # Configure electron-builder with FIXED binary packaging
    - name: Configure electron-builder (Unix) - FIXED
      if: runner.os != 'Windows'
      run: |
        echo "🔧 Configuring electron-builder with BINARY PACKAGING..."
        
        # Create electron-builder config with proper binary packaging
        cat > electron-builder-fixed.json << 'EOF'
        {
          "appId": "com.yourcompany.whisperdesk",
          "productName": "WhisperDesk Enhanced",
          "directories": {
            "output": "dist"
          },
          "artifactName": "${productName}-${version}-${arch}.${ext}",
          "files": [
            "src/main/**/*",
            "src/renderer/whisperdesk-ui/dist/**/*",
            "src/shared/**/*",
            "node_modules/**/*",
            "package.json"
          ],
          "extraResources": [
            {
              "from": "binaries/",
              "to": "binaries/",
              "filter": ["**/*"]
            },
            {
              "from": "models/",
              "to": "models/",
              "filter": ["**/*"]
            }
          ],
          "win": {
            "target": [
              {
                "target": "nsis",
                "arch": ["x64"]
              },
              {
                "target": "zip",
                "arch": ["x64"]
              }
            ],
            "publisherName": "WhisperDesk Team",
            "verifyUpdateCodeSignature": false
          },
          "mac": {
            "target": [
              {
                "target": "dmg",
                "arch": ["x64", "arm64"]
              },
              {
                "target": "zip",
                "arch": ["x64", "arm64"]
              }
            ],
            "category": "public.app-category.productivity",
            "hardenedRuntime": true,
            "gatekeeperAssess": false
          },
          "linux": {
            "target": [
              {
                "target": "AppImage",
                "arch": ["x64"]
              },
              {
                "target": "deb",
                "arch": ["x64"]
              },
              {
                "target": "rpm",
                "arch": ["x64"]
              },
              {
                "target": "tar.gz",
                "arch": ["x64"]
              }
            ],
            "category": "AudioVideo"
          }
        }
        EOF
        
        echo "✅ Electron-builder configuration created with BINARY PACKAGING"
        echo "📋 Config includes extraResources for binaries/ directory"

    - name: Configure electron-builder (Windows) - FIXED
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "🔧 Configuring electron-builder with BINARY PACKAGING..."
        
        # Create electron-builder config with proper binary packaging
        $config = @"
        {
          "appId": "com.yourcompany.whisperdesk",
          "productName": "WhisperDesk Enhanced",
          "directories": {
            "output": "dist"
          },
          "artifactName": "`${productName}-`${version}-`${arch}.`${ext}",
          "files": [
            "src/main/**/*",
            "src/renderer/whisperdesk-ui/dist/**/*",
            "src/shared/**/*",
            "node_modules/**/*",
            "package.json"
          ],
          "extraResources": [
            {
              "from": "binaries/",
              "to": "binaries/",
              "filter": ["**/*"]
            },
            {
              "from": "models/",
              "to": "models/",
              "filter": ["**/*"]
            }
          ],
          "win": {
            "target": [
              {
                "target": "nsis",
                "arch": ["x64"]
              },
              {
                "target": "zip",
                "arch": ["x64"]
              }
            ],
            "publisherName": "WhisperDesk Team",
            "verifyUpdateCodeSignature": false
          },
          "mac": {
            "target": [
              {
                "target": "dmg",
                "arch": ["x64", "arm64"]
              },
              {
                "target": "zip",
                "arch": ["x64", "arm64"]
              }
            ],
            "category": "public.app-category.productivity",
            "hardenedRuntime": true,
            "gatekeeperAssess": false
          },
          "linux": {
            "target": [
              {
                "target": "AppImage",
                "arch": ["x64"]
              },
              {
                "target": "deb",
                "arch": ["x64"]
              },
              {
                "target": "rpm",
                "arch": ["x64"]
              },
              {
                "target": "tar.gz",
                "arch": ["x64"]
              }
            ],
            "category": "AudioVideo"
          }
        }
        "@
        
        # Write to file
        $config | Out-File -FilePath "electron-builder-fixed.json" -Encoding UTF8
        
        Write-Host "✅ Electron-builder configuration created with BINARY PACKAGING"
        Write-Host "📋 Config includes extraResources for binaries/ directory"

    # Verify version before building
    - name: Verify version configuration
      shell: bash
      run: |
        echo "🔍 Verifying version configuration..."
        echo "📋 Git ref: ${{ github.ref }}"
        echo "📋 Git ref type: ${{ github.ref_type }}"
        echo "📋 Git ref name: ${{ github.ref_name }}"
        echo "📋 App version (env): $APP_VERSION"
        echo "📋 Package.json version: $(node -p "require('./package.json').version")"
        
        # Verify versions match
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        if [ "$APP_VERSION" != "$PACKAGE_VERSION" ]; then
          echo "⚠️ Warning: Environment version ($APP_VERSION) differs from package.json ($PACKAGE_VERSION)"
        else
          echo "✅ Version consistency verified: $APP_VERSION"
        fi

    # Verify binary before building Electron app
    - name: Verify whisper binary
      shell: bash
      run: |
        echo "🔍 Verifying whisper binary..."
        
        if [ "${{ runner.os }}" = "Windows" ]; then
          BINARY_PATH="binaries/whisper.exe"
        else
          BINARY_PATH="binaries/whisper"
        fi
        
        if [ -f "$BINARY_PATH" ]; then
          echo "✅ Binary exists at: $BINARY_PATH"
          ls -la "$BINARY_PATH"
          
          # Test the binary (allow failure since it might need models)
          if [ "${{ runner.os }}" = "Windows" ]; then
            ./binaries/whisper.exe --help || echo "Binary test failed but file exists"
          else
            ./binaries/whisper --help || echo "Binary test failed but file exists"
          fi
        else
          echo "❌ Binary not found at: $BINARY_PATH"
          echo "📋 Contents of binaries directory:"
          ls -la binaries/ || echo "No binaries directory"
          exit 1
        fi

    # Build Electron app for specific platform - FIXED with proper binary packaging
    - name: Build Electron app (macOS)
      if: matrix.platform == 'darwin'
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
      run: |
        npm run build:skip-whisper
        npx electron-builder ${{ matrix.electron_target }} --publish=never --config electron-builder-fixed.json

    - name: Build Electron app (Linux)
      if: matrix.platform == 'linux'
      run: |
        npm run build:skip-whisper
        npx electron-builder ${{ matrix.electron_target }} --publish=never --config electron-builder-fixed.json

    - name: Build Electron app (Windows)
      if: matrix.platform == 'win32'
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
      shell: pwsh
      run: |
        # Get required DLLs from whisper.cpp build
        $whisperBuildDir = "C:\temp\whisper.cpp\build\bin\Release"
        
        # Create binaries directory if it doesn't exist
        New-Item -ItemType Directory -Force -Path "binaries"
        
        # Copy whisper.exe and its dependencies
        Copy-Item "$whisperBuildDir\whisper-cli.exe" "binaries\whisper.exe" -Force
        Write-Host "✅ Copied whisper-cli.exe -> whisper.exe"
        
        # Copy required DLL files if they exist
        $requiredDlls = @("ggml-base.dll", "ggml-cpu.dll", "ggml.dll", "whisper.dll")
        $copiedDlls = @()
        
        foreach ($dll in $requiredDlls) {
            $dllPath = Join-Path $whisperBuildDir $dll
            if (Test-Path $dllPath) {
                Copy-Item $dllPath "binaries\" -Force
                $copiedDlls += $dll
                Write-Host "✅ Copied DLL: $dll"
            } else {
                Write-Host "⚠️ DLL not found: $dll"
            }
        }
        
        # Copy any additional DLLs we might have missed
        $additionalDlls = Get-ChildItem -Path "$whisperBuildDir" -Filter "*.dll" | Where-Object { $_.Name -notin $requiredDlls }
        foreach ($dll in $additionalDlls) {
            Copy-Item $dll.FullName "binaries\" -Force
            $copiedDlls += $dll.Name
            Write-Host "✅ Copied additional DLL: $($dll.Name)"
        }
        
        Write-Host "📋 Total DLLs copied: $($copiedDlls.Count)"
        Write-Host "📋 DLL list: $($copiedDlls -join ', ')"
        
        # Verify all files are in place
        Write-Host "📋 Final binaries directory contents:"
        Get-ChildItem "binaries" | Format-Table Name, Length -AutoSize
        
        # Test the binary with dependencies
        Write-Host "🧪 Testing whisper.exe with dependencies..."
        $env:PATH = "$(Get-Location)\binaries;$env:PATH"
        try {
            & "binaries\whisper.exe" --help | Out-Null
            if ($LASTEXITCODE -eq 0) {
                Write-Host "✅ Binary test passed - all dependencies found"
            } else {
                Write-Host "⚠️ Binary test failed with exit code: $LASTEXITCODE"
            }
        } catch {
            Write-Host "⚠️ Binary test failed: $($_.Exception.Message)"
        }
        
        # Build the application - USING FIXED CONFIG WITH BINARY PACKAGING
        npm run build:skip-whisper
        npx electron-builder ${{ matrix.electron_target }} --publish=never --config electron-builder-fixed.json

    # VERIFY: Check for unwanted ia32 builds
    - name: Verify no ia32 builds created
      shell: bash
      run: |
        echo "🔍 Checking for unwanted ia32/32-bit builds..."
        
        # Check for ia32 in filenames
        if find dist/ -name "*ia32*" 2>/dev/null | grep -q .; then
          echo "❌ ERROR: Found ia32 builds when only x64 was expected!"
          find dist/ -name "*ia32*"
          exit 1
        else
          echo "✅ No ia32 builds found - good!"
        fi
        
        # List all built files for verification
        echo "📋 Built files:"
        find dist/ -type f -name "*.exe" -o -name "*.dmg" -o -name "*.zip" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.tar.gz" | sort

    # FIXED: Upload artifacts with clear platform separation
    - name: Upload macOS artifacts
      if: matrix.platform == 'darwin'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: |
          dist/*.dmg
          dist/*.zip
        retention-days: 30

    - name: Upload Linux artifacts
      if: matrix.platform == 'linux'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: |
          dist/*.AppImage
          dist/*.deb
          dist/*.rpm
          dist/*.tar.gz
        retention-days: 30

    - name: Upload Windows artifacts
      if: matrix.platform == 'win32'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: |
          dist/*.exe
          dist/*.zip
        retention-days: 30

  # FIXED: Create release with proper file organization
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      actions: read
      id-token: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Set clean version for release notes
      id: version
      run: |
        # Extract clean version (without 'v' prefix) for release notes
        CLEAN_VERSION="${{ github.ref_name }}"
        CLEAN_VERSION="${CLEAN_VERSION#v}"
        echo "clean=$CLEAN_VERSION" >> $GITHUB_OUTPUT
        echo "🏷️ Clean version for release notes: $CLEAN_VERSION"

    - name: Organize release files
      run: |
        echo "🔧 Organizing release files by platform with deduplication..."
        mkdir -p release-files
        
        # Function to copy file with unique naming if duplicate exists
        copy_unique() {
          local src="$1"
          local dst="$2"
          local filename=$(basename "$src")
          local counter=1
          local target="$dst/$filename"
          
          # If file already exists, add counter
          while [ -f "$target" ]; do
            local base="${filename%.*}"
            local ext="${filename##*.}"
            if [ "$base" = "$filename" ]; then
              # No extension
              target="$dst/${base}-${counter}"
            else
              # Has extension
              target="$dst/${base}-${counter}.${ext}"
            fi
            counter=$((counter + 1))
          done
          
          cp "$src" "$target"
          echo "📁 Copied: $src -> $target"
        }
        
        # Process each artifact directory
        for artifact_dir in artifacts/*/; do
          echo "🔍 Processing: $artifact_dir"
          
          # Determine platform from directory name
          if [[ "$artifact_dir" == *"windows"* ]]; then
            platform="windows"
          elif [[ "$artifact_dir" == *"mac"* ]]; then
            platform="macos"
          elif [[ "$artifact_dir" == *"linux"* ]]; then
            platform="linux"
          else
            echo "⚠️ Unknown platform for $artifact_dir, skipping..."
            continue
          fi
          
          # Create platform directory
          mkdir -p "release-files/$platform"
          
          # Copy files with deduplication
          find "$artifact_dir" -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.zip" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.tar.gz" \) | while read -r file; do
            copy_unique "$file" "release-files/$platform"
          done
        done
        
        echo "📋 Final release file structure:"
        find release-files/ -type f | sort

    - name: Display structure of organized files
      run: |
        echo "📁 Organized file structure:"
        ls -la release-files/
        echo ""
        echo "🖥️ Windows files:"
        ls -la release-files/windows/ || echo "No Windows files"
        echo ""
        echo "🍎 macOS files:"
        ls -la release-files/macos/ || echo "No macOS files"
        echo ""
        echo "🐧 Linux files:"
        ls -la release-files/linux/ || echo "No Linux files"

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-files/**/*
        draft: false
        prerelease: false
        generate_release_notes: true
        name: "WhisperDesk Enhanced ${{ github.ref_name }}"
        body: |
          ## WhisperDesk Enhanced ${{ github.ref_name }}
          
          🎉 **New Release Available!**
          
          ### 📦 Download Options:
          
          **🖥️ Windows (64-bit only)**:
          - `WhisperDesk-Enhanced-${{ steps.version.outputs.clean }}-x64.exe` - Installer
          - `WhisperDesk-Enhanced-${{ steps.version.outputs.clean }}-x64.zip` - Portable version
          
          **🍎 macOS**:
          - `WhisperDesk-Enhanced-${{ steps.version.outputs.clean }}-x64.dmg` - Intel Macs
          - `WhisperDesk-Enhanced-${{ steps.version.outputs.clean }}-arm64.dmg` - Apple Silicon Macs
          
          **🐧 Linux**:
          - `WhisperDesk-Enhanced-${{ steps.version.outputs.clean }}-x64.AppImage` - Portable (recommended)
          - `WhisperDesk-Enhanced-${{ steps.version.outputs.clean }}-x64.deb` - Debian/Ubuntu package
          - `WhisperDesk-Enhanced-${{ steps.version.outputs.clean }}-x64.rpm` - Red Hat/Fedora package
          
          ### ✨ Features:
          - 🎵 Native whisper.cpp integration for fast, offline transcription
          - 📱 Cross-platform support (Windows, macOS, Linux)
          - 🔄 Real-time progress tracking
          - 💾 Persistent state management
          - 🎯 Multiple model support (Tiny, Base, Small, Medium, Large)
          - 📁 Drag & drop file upload
          - 🎨 Modern, responsive UI
          
          ### 🚀 Quick Start:
          1. **Download**: Choose the appropriate file for your platform above
          2. **Install**: 
             - Windows: Run the installer or use portable version
             - macOS: Open the .dmg and drag to Applications
             - Linux: Make AppImage executable or install package
          3. **Setup**: Launch WhisperDesk and go to Models tab
          4. **Download Model**: Download a transcription model (start with Tiny)
          5. **Transcribe**: Upload audio/video files and start transcribing!
          
          ### 🔧 Troubleshooting:
          - **Windows**: Use the portable version if installer doesn't work
          - **macOS**: Right-click → Open if blocked by Gatekeeper
          - **Linux**: `chmod +x *.AppImage` to make executable
          
          ---
          Auto-generated release notes below ⬇️
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}