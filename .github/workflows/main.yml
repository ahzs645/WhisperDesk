# .github/workflows/main.yml - FIXED VERSION with modern whisper.cpp build
name: Build WhisperDesk for All Platforms

on:
  push:
    branches: [ main, release ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read
  checks: write
  pull-requests: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: darwin
            arch: x64
            artifact: WhisperDesk-mac-x64
          - os: macos-latest
            platform: darwin
            arch: arm64
            artifact: WhisperDesk-mac-arm64
          - os: ubuntu-latest
            platform: linux
            arch: x64
            artifact: WhisperDesk-linux-x64
          - os: windows-latest
            platform: win32
            arch: x64
            artifact: WhisperDesk-windows-x64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest

    # Platform-specific dependencies
    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libasound2-dev
        sudo apt-get install -y fuse libfuse2

    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: |
        # Install Xcode command line tools if not present
        xcode-select --install || true
        # Install cmake via homebrew
        brew install cmake

    - name: Install Windows dependencies
      if: runner.os == 'Windows'
      run: |
        # Install Visual Studio Build Tools
        choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools" -y
        # Install cmake
        choco install cmake -y

    # Install main dependencies
    - name: Install main dependencies
      run: npm install

    # Install renderer dependencies
    - name: Install renderer dependencies
      run: |
        cd src/renderer/whisperdesk-ui
        pnpm install --frozen-lockfile

    # Build whisper.cpp from source - MODERN CMAKE APPROACH
    - name: Build whisper.cpp (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        echo "üî® Building whisper.cpp with modern cmake approach..."
        
        # Clone whisper.cpp
        git clone https://github.com/ggerganov/whisper.cpp.git /tmp/whisper.cpp
        cd /tmp/whisper.cpp
        
        # Use modern cmake build approach (not make)
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release --parallel $(nproc 2>/dev/null || sysctl -n hw.ncpu || echo 4)
        
        # The binary should be in build/bin/whisper-cli
        echo "üìã Checking for built binary..."
        ls -la build/bin/ || echo "No build/bin directory"
        ls -la bin/ || echo "No bin directory"
        
        # Find the whisper-cli binary
        if [ -f "build/bin/whisper-cli" ]; then
          WHISPER_BINARY="build/bin/whisper-cli"
        elif [ -f "bin/whisper-cli" ]; then
          WHISPER_BINARY="bin/whisper-cli"
        else
          echo "‚ùå Could not find whisper-cli binary"
          echo "üìã Available files:"
          find . -name "*whisper*" -type f | head -10
          exit 1
        fi
        
        echo "‚úÖ Found whisper binary at: $WHISPER_BINARY"
        
        # Copy to project binaries directory
        mkdir -p "$GITHUB_WORKSPACE/binaries"
        cp "$WHISPER_BINARY" "$GITHUB_WORKSPACE/binaries/whisper"
        chmod +x "$GITHUB_WORKSPACE/binaries/whisper"
        
        # Verify the binary works
        "$GITHUB_WORKSPACE/binaries/whisper" --help || echo "Binary test failed but continuing..."
        
        echo "‚úÖ whisper.cpp built and installed successfully"

    - name: Build whisper.cpp (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "üî® Building whisper.cpp for Windows with cmake..."
        
        # Clone whisper.cpp
        git clone https://github.com/ggerganov/whisper.cpp.git C:\temp\whisper.cpp
        Set-Location C:\temp\whisper.cpp
        
        # Use modern cmake build approach
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release --parallel
        
        # Find the whisper-cli binary
        $whisperBinary = $null
        if (Test-Path "build\bin\Release\whisper-cli.exe") {
            $whisperBinary = "build\bin\Release\whisper-cli.exe"
        } elseif (Test-Path "bin\Release\whisper-cli.exe") {
            $whisperBinary = "bin\Release\whisper-cli.exe"
        } elseif (Test-Path "build\Release\whisper-cli.exe") {
            $whisperBinary = "build\Release\whisper-cli.exe"
        } else {
            Write-Host "‚ùå Could not find whisper-cli.exe binary"
            Write-Host "üìã Available files in build:"
            Get-ChildItem -Recurse -Filter "*whisper*" | Select-Object FullName
            exit 1
        }
        
        Write-Host "‚úÖ Found whisper binary at: $whisperBinary"
        
        # Copy to project binaries directory
        New-Item -ItemType Directory -Force -Path "$env:GITHUB_WORKSPACE\binaries"
        Copy-Item "$whisperBinary" "$env:GITHUB_WORKSPACE\binaries\whisper.exe" -Force
        
        Write-Host "‚úÖ whisper.cpp built and installed successfully"

    # Download tiny model for inclusion
    - name: Download tiny model
      run: |
        mkdir -p models
        curl -L -o models/ggml-tiny.bin https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-tiny.bin

    # Build renderer
    - name: Build renderer
      run: |
        cd src/renderer/whisperdesk-ui
        pnpm run build

    # Verify binary before building Electron app
    - name: Verify whisper binary
      shell: bash
      run: |
        echo "üîç Verifying whisper binary..."
        
        if [ "${{ runner.os }}" = "Windows" ]; then
          BINARY_PATH="binaries/whisper.exe"
        else
          BINARY_PATH="binaries/whisper"
        fi
        
        if [ -f "$BINARY_PATH" ]; then
          echo "‚úÖ Binary exists at: $BINARY_PATH"
          ls -la "$BINARY_PATH"
          
          # Test the binary (allow failure since it might need models)
          if [ "${{ runner.os }}" = "Windows" ]; then
            ./binaries/whisper.exe --help || echo "Binary test failed but file exists"
          else
            ./binaries/whisper --help || echo "Binary test failed but file exists"
          fi
        else
          echo "‚ùå Binary not found at: $BINARY_PATH"
          echo "üìã Contents of binaries directory:"
          ls -la binaries/ || echo "No binaries directory"
          exit 1
        fi

    # Build Electron app for specific platform
    - name: Build Electron app (macOS x64)
      if: matrix.platform == 'darwin' && matrix.arch == 'x64'
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
      run: npm run build && npx electron-builder --mac --x64 --publish=never

    - name: Build Electron app (macOS ARM64)
      if: matrix.platform == 'darwin' && matrix.arch == 'arm64'
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
      run: npm run build && npx electron-builder --mac --arm64 --publish=never

    - name: Build Electron app (Linux)
      if: matrix.platform == 'linux'
      run: npm run build && npx electron-builder --linux --publish=never

    - name: Build Electron app (Windows)
      if: matrix.platform == 'win32'
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
      run: npm run build && npx electron-builder --win --publish=never

    # Upload artifacts
    - name: Upload macOS artifacts
      if: matrix.platform == 'darwin'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: |
          dist/*.dmg
          dist/*.zip
        retention-days: 30

    - name: Upload Linux artifacts
      if: matrix.platform == 'linux'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: |
          dist/*.AppImage
          dist/*.deb
          dist/*.rpm
          dist/*.tar.gz
        retention-days: 30

    - name: Upload Windows artifacts
      if: matrix.platform == 'win32'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: |
          dist/*.exe
          dist/*.zip
        retention-days: 30

  # Create release if this is a tag
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      actions: read
      id-token: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: |
        echo "Artifact structure:"
        ls -la artifacts/
        find artifacts/ -type f -name "*.dmg" -o -name "*.zip" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" | head -20

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*
        draft: false
        prerelease: false
        generate_release_notes: true
        name: "WhisperDesk Enhanced ${{ github.ref_name }}"
        body: |
          ## WhisperDesk Enhanced ${{ github.ref_name }}
          
          üéâ **New Release Available!**
          
          ### üì¶ Download Options:
          - **Windows**: `WhisperDesk-windows-x64.exe` 
          - **macOS Intel**: `WhisperDesk-mac-x64.dmg`
          - **macOS Apple Silicon**: `WhisperDesk-mac-arm64.dmg`
          - **Linux**: `WhisperDesk-linux-x64.AppImage` (portable) or `.deb`/`.rpm` packages
          
          ### ‚ú® Features:
          - üéµ Native whisper.cpp integration for fast, offline transcription
          - üì± Cross-platform support (Windows, macOS, Linux)
          - üîÑ Real-time progress tracking
          - üíæ Persistent state management
          - üéØ Multiple model support (Tiny, Base, Small, Medium, Large)
          - üìÅ Drag & drop file upload
          - üé® Modern, responsive UI
          
          ### üöÄ Quick Start:
          1. Download the appropriate file for your platform
          2. Install and launch WhisperDesk
          3. Go to Models tab and download a transcription model
          4. Upload audio/video files and start transcribing!
          
          Auto-generated release notes below ‚¨áÔ∏è
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}