name: Build WhisperDesk for All Platforms

on:
  push:
    branches: [ main, master, release ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create new release'
        required: true
        type: boolean
      release_tag:
        description: 'Release tag name (e.g., v2.1.0)'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref && github.ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: read
  checks: write
  pull-requests: write

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Determine version
        id: version
        shell: bash
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            # Extract version from git tag for official release
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix if present
            TAG_NAME="${{ github.ref_name }}"
            echo "üè∑Ô∏è Official release: $TAG_NAME"
            
            # Update package.json version for official releases
            cat package.json | jq --arg version "$VERSION" '.version = $version' > package.json.tmp && mv package.json.tmp package.json
            echo "üì¶ Updated package.json to version: $VERSION"
            
          elif [ -n "${{ github.event.inputs.release_tag }}" ]; then
            # Manual release input
            TAG_NAME="${{ github.event.inputs.release_tag }}"
            VERSION="${TAG_NAME#v}"
            echo "üè∑Ô∏è Manual release: $TAG_NAME"
            
            # Update package.json for manual releases too
            cat package.json | jq --arg version "$VERSION" '.version = $version' > package.json.tmp && mv package.json.tmp package.json
            echo "üì¶ Updated package.json to version: $VERSION"
            
          else
            # Development build - use current package.json version + "-dev"
            PACKAGE_VERSION=$(node -p "require('./package.json').version")
            VERSION="${PACKAGE_VERSION}-dev"
            TAG_NAME="dev"
            echo "üöß Development build: $VERSION"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Version: $VERSION"
          echo "üè∑Ô∏è Tag: $TAG_NAME"

  # Windows build with proper whisper.cpp compilation
  build-windows:
    runs-on: windows-latest
    needs: determine-version

    strategy:
      matrix:
        arch: [x64]
        build_type: [Release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Update main package.json version
        shell: pwsh
        run: |
          $version = "${{ needs.determine-version.outputs.version }}"
          Write-Host "üè∑Ô∏è Setting main package.json version to: $version"
          
          if (Test-Path "package.json") {
            $packageJson = Get-Content package.json -Raw | ConvertFrom-Json
            $packageJson.version = $version
            
            # Remove DMG target from mac builds to prevent conflicts
            if ($packageJson.build.mac.target) {
              $packageJson.build.mac.target = @(@{
                target = "zip"
                arch = @("x64", "arm64")
              })
            }
            
            $packageJson | ConvertTo-Json -Depth 100 | Set-Content package.json -Encoding UTF8
            Write-Host "‚úÖ Updated main package.json version to: $version"
            Write-Host "‚úÖ Ensured mac target is ZIP only"
            
            # Verify the update
            $verifyPackage = Get-Content package.json -Raw | ConvertFrom-Json
            Write-Host "üìã Package.json version field: $($verifyPackage.version)"
          } else {
            Write-Host "‚ùå package.json not found"
            exit 1
          }

      # Install dependencies
      - name: Install main dependencies
        env:
          CI: true
          GITHUB_ACTIONS: true
          npm_config_ignore_scripts: true  # Skip all lifecycle scripts including postinstall
        run: npm install

      - name: Install renderer dependencies
        shell: pwsh
        run: |
          if (Test-Path "src/renderer/whisperdesk-ui") {
            Set-Location "src/renderer/whisperdesk-ui"
            
            # Update renderer package.json version if it exists
            if (Test-Path "package.json") {
              $version = "${{ needs.determine-version.outputs.version }}"
              $packageJson = Get-Content package.json -Raw | ConvertFrom-Json
              
              if (-not $packageJson.PSObject.Properties['version']) {
                $packageJson | Add-Member -MemberType NoteProperty -Name 'version' -Value $version
              } else {
                $packageJson.version = $version
              }
              
              $packageJson | ConvertTo-Json -Depth 100 | Set-Content package.json
              Write-Host "‚úÖ Updated renderer package.json version"
            }
            
            pnpm install --frozen-lockfile
            Set-Location "$env:GITHUB_WORKSPACE"
          } else {
            Write-Host "‚ö†Ô∏è Renderer directory not found, skipping"
          }

      - name: Build whisper.cpp (via script)
        run: npm run build:whisper
        shell: bash # npm commands run fine in bash on Windows too

      # Package Visual C++ Runtime
      - name: Package VC++ Runtime
        shell: pwsh
        run: |
          Write-Host "üì¶ Packaging Visual C++ Runtime..." -ForegroundColor Green
          
          $targetDir = "$env:GITHUB_WORKSPACE\binaries"
          
          # Download VC++ Redistributable
          $vcredistUrl = "https://aka.ms/vs/17/release/vc_redist.x64.exe"
          $vcredistPath = "$targetDir\vc_redist.x64.exe"
          
          try {
            Invoke-WebRequest -Uri $vcredistUrl -OutFile $vcredistPath -UseBasicParsing
            Write-Host "‚úÖ Downloaded VC++ Redistributable"
          } catch {
            Write-Host "‚ö†Ô∏è Failed to download VC++ Redistributable: $($_.Exception.Message)"
          }
          
          # Copy system runtime DLLs if available
          $systemDlls = @(
            "C:\Windows\System32\msvcp140.dll",
            "C:\Windows\System32\vcruntime140.dll",
            "C:\Windows\System32\vcruntime140_1.dll"
          )
          
          foreach ($dll in $systemDlls) {
            if (Test-Path $dll) {
              $dllName = Split-Path $dll -Leaf
              try {
                Copy-Item $dll "$targetDir\$dllName" -Force
                Write-Host "‚úÖ Copied runtime: $dllName"
              } catch {
                Write-Host "‚ö†Ô∏è Could not copy $dllName"
              }
            }
          }

      # Test the binary
      - name: Test whisper binary
        shell: pwsh
        run: |
          Write-Host "üîç Testing whisper binary..." -ForegroundColor Green
          
          $binaryPath = "binaries\whisper-cli.exe"
          
          if (-not (Test-Path $binaryPath)) {
            Write-Host "‚ùå Binary not found: $binaryPath"
            exit 1
          }
          
          $fileInfo = Get-Item $binaryPath
          $sizeKB = [math]::Round($fileInfo.Length / 1024, 1)
          Write-Host "üìä Binary size: $sizeKB KB"
          
          # Simple existence and size check (avoid execution issues in CI)
          if ($fileInfo.Length -gt 100KB) {
            Write-Host "‚úÖ Binary appears valid ($sizeKB KB)"
          } else {
            Write-Host "‚ùå Binary too small ($sizeKB KB)"
            exit 1
          }

      # Download tiny model
      - name: Download tiny model
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "models" | Out-Null
          Invoke-WebRequest -Uri "https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-tiny.bin" -OutFile "models/ggml-tiny.bin"

      # Build renderer
      - name: Build renderer
        shell: pwsh
        run: |
          if (Test-Path "src/renderer/whisperdesk-ui") {
            Set-Location "src/renderer/whisperdesk-ui"
            pnpm run build
            Set-Location "$env:GITHUB_WORKSPACE"
          } else {
            Write-Host "‚ö†Ô∏è Renderer directory not found, skipping"
          }

      # Build Electron app
      - name: Build Electron app
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
        shell: pwsh
        run: |
          npx electron-builder --win --x64 --publish=never

      # Upload artifacts
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: WhisperDesk-windows-${{ matrix.arch }}
          path: |
            dist/*.exe
            dist/*.zip
          retention-days: 30

  # macOS build
  build-macos:
    runs-on: macos-latest
    needs: determine-version

    strategy:
      matrix:
        arch: [x64, arm64]
        build_type: [Release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: |
          brew update
          brew install cmake

      - name: Fix package.json dependencies and update version
        run: |
          VERSION="${{ needs.determine-version.outputs.version }}"
          echo "üè∑Ô∏è Setting version to: $VERSION"
          
          # Update main package.json
          if [ -f "package.json" ]; then
            # Read current package.json and update version and fix electron dependency
            cat package.json | jq --arg version "$VERSION" '
              .version = $version |
              if .dependencies.electron then
                .devDependencies.electron = .dependencies.electron |
                del(.dependencies.electron)
              else
                .
              end
            ' > package.json.tmp && mv package.json.tmp package.json
            
            echo "‚úÖ Updated package.json version to: $VERSION"
            echo "üìã Package.json version field: $(cat package.json | jq -r '.version')"
          else
            echo "‚ùå package.json not found"
            exit 1
          fi

      - name: Install main dependencies
        run: npm install

      - name: Install renderer dependencies
        run: |
          if [ -d "src/renderer/whisperdesk-ui" ]; then
            cd src/renderer/whisperdesk-ui
            
            # Update renderer package.json version if it exists
            if [ -f "package.json" ]; then
              VERSION="${{ needs.determine-version.outputs.version }}"
              cat package.json | jq --arg version "$VERSION" '.version = $version' > package.json.tmp
              mv package.json.tmp package.json
              echo "‚úÖ Updated renderer package.json version"
            fi
            
            pnpm install --frozen-lockfile
          else
            echo "‚ö†Ô∏è Renderer directory not found, skipping"
          fi

      - name: Build whisper.cpp (via script)
        run: npm run build:whisper
        shell: bash

      # Download tiny model
      - name: Download tiny model
        run: |
          mkdir -p models
          curl -L -o models/ggml-tiny.bin https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-tiny.bin

      # Build renderer
      - name: Build renderer
        run: |
          if [ -d "src/renderer/whisperdesk-ui" ]; then
            cd src/renderer/whisperdesk-ui
            pnpm run build
          else
            echo "‚ö†Ô∏è Renderer directory not found, skipping"
          fi

      # Build Electron app
      - name: Build Electron app
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            npx electron-builder --mac --arm64 --publish=never
          else
            npx electron-builder --mac --x64 --publish=never
          fi

      # Upload artifacts
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: WhisperDesk-macos-${{ matrix.arch }}
          path: |
            dist/*.zip
          retention-days: 30

  # Linux build
  build-linux:
    runs-on: ubuntu-22.04
    needs: determine-version

    strategy:
      matrix:
        arch: [x64]
        build_type: [Release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libasound2-dev fuse libfuse2

      - name: Update main package.json version
        run: |
          VERSION="${{ needs.determine-version.outputs.version }}"
          echo "üè∑Ô∏è Setting main package.json version to: $VERSION"
          
          if [ -f "package.json" ]; then
            cat package.json | jq --arg version "$VERSION" '
              .version = $version |
              .build.mac.target = [{"target": "zip", "arch": ["x64", "arm64"]}]
            ' > package.json.tmp && mv package.json.tmp package.json
            echo "‚úÖ Updated main package.json version to: $VERSION"
            echo "‚úÖ Ensured mac target is ZIP only"
            echo "üìã Package.json version field: $(cat package.json | jq -r '.version')"
          else
            echo "‚ùå package.json not found"
            exit 1
          fi

      - name: Install main dependencies
        env:
          CI: true
          GITHUB_ACTIONS: true
          npm_config_ignore_scripts: true  # Skip all lifecycle scripts including postinstall
        run: npm install

      - name: Install renderer dependencies
        run: |
          if [ -d "src/renderer/whisperdesk-ui" ]; then
            cd src/renderer/whisperdesk-ui
            
            # Update renderer package.json version if it exists
            if [ -f "package.json" ]; then
              VERSION="${{ needs.determine-version.outputs.version }}"
              cat package.json | jq --arg version "$VERSION" '.version = $version' > package.json.tmp
              mv package.json.tmp package.json
              echo "‚úÖ Updated renderer package.json version"
            fi
            
            pnpm install --frozen-lockfile
          else
            echo "‚ö†Ô∏è Renderer directory not found, skipping"
          fi

      - name: Build whisper.cpp (via script)
        run: npm run build:whisper
        shell: bash

      # Download tiny model
      - name: Download tiny model
        run: |
          mkdir -p models
          curl -L -o models/ggml-tiny.bin https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-tiny.bin

      # Build renderer
      - name: Build renderer
        run: |
          if [ -d "src/renderer/whisperdesk-ui" ]; then
            cd src/renderer/whisperdesk-ui
            pnpm run build
          else
            echo "‚ö†Ô∏è Renderer directory not found, skipping"
          fi

      # Build Electron app
      - name: Build Electron app
        run: |
          npx electron-builder --linux --x64 --publish=never

      # Upload artifacts
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: WhisperDesk-linux-${{ matrix.arch }}
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
          retention-days: 30

  # Create release
  create-release:
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.create_release == 'true' || needs.determine-version.outputs.tag_name == 'dev'
    needs: [determine-version, build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest

    permissions:
      contents: write
      actions: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Organize release files
        run: |
          echo "üîß Organizing release files..."
          mkdir -p release-files
          
          # Copy all artifacts to release directory with organized naming
          find artifacts/ -type f \( -name "*.exe" -o -name "*.zip" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.tar.gz" \) -exec cp {} release-files/ \;
          
          echo "üìã Release files:"
          ls -la release-files/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-files/*
          draft: false
          prerelease: ${{ contains(needs.determine-version.outputs.version, 'build') }}
          generate_release_notes: true
          name: "WhisperDesk ${{ needs.determine-version.outputs.tag_name }}"
          tag_name: ${{ needs.determine-version.outputs.tag_name }}
          body: |
            ## WhisperDesk ${{ needs.determine-version.outputs.tag_name }}
            
            üéâ **New Release Available!**
            
            ### üì¶ Download Options:
            
            **üñ•Ô∏è Windows (64-bit)**:
            - `WhisperDesk-Setup-${{ needs.determine-version.outputs.version }}-win-x64.exe` - Installer (recommended)
            - `WhisperDesk-Portable-${{ needs.determine-version.outputs.version }}-win-x64.exe` - Portable version (no installation required)
            
            **üçé macOS**:
            - `WhisperDesk-${{ needs.determine-version.outputs.version }}-mac-x64.dmg` - Intel Mac disk image
            - `WhisperDesk-${{ needs.determine-version.outputs.version }}-mac-arm64.dmg` - Apple Silicon disk image
            - `WhisperDesk-${{ needs.determine-version.outputs.version }}-mac-x64.zip` - Intel Mac portable
            - `WhisperDesk-${{ needs.determine-version.outputs.version }}-mac-arm64.zip` - Apple Silicon portable
            
            **üêß Linux (64-bit)**:
            - `WhisperDesk-${{ needs.determine-version.outputs.version }}-linux-x64.AppImage` - Portable (recommended)
            - `WhisperDesk-${{ needs.determine-version.outputs.version }}-linux-x64.deb` - Debian/Ubuntu package
            - `WhisperDesk-${{ needs.determine-version.outputs.version }}-linux-x64.rpm` - Red Hat/Fedora package
            - `WhisperDesk-${{ needs.determine-version.outputs.version }}-linux-x64.tar.gz` - Generic archive
            
            ### ‚ú® Features:
            - üéµ Native whisper.cpp integration with whisper-cli binary
            - üì± Cross-platform support (Windows, macOS, Linux)
            - üîÑ Real-time progress tracking
            - üíæ Persistent state management
            - üéØ Multiple model support (Tiny, Base, Small, Medium, Large)
            - üìÅ Drag & drop file upload
            - üé® Modern, responsive UI
            
            ### üöÄ Quick Start:
            1. **Download** the appropriate file for your platform
            2. **Install** and launch WhisperDesk
            3. **Download a model** in the Models tab (start with Tiny)
            4. **Start transcribing** your audio files!
            
            ### üîß Troubleshooting:
            - **Windows**: If you get DLL errors, the installer includes `vc_redist.x64.exe`
            - **macOS**: Right-click ‚Üí Open if blocked by Gatekeeper
            - **Linux**: `chmod +x *.AppImage` to make executable
            
            ---
            
            **Technical Details:**
            - Version: ${{ needs.determine-version.outputs.version }}
            - Binary: whisper-cli (latest whisper.cpp)
            - Built with: CMake + electron-builder
            
            Auto-generated release notes below ‚¨áÔ∏è
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}