name: Build WhisperDesk for All Platforms

on:
  push:
    branches: [ main, master, release ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create new release'
        required: true
        type: boolean
      release_tag:
        description: 'Release tag name (e.g., v2.1.0)'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref && github.ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: read
  checks: write
  pull-requests: write

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Determine version
        id: version
        shell: bash
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            # Extract version from git tag
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix if present
            TAG_NAME="${{ github.ref_name }}"
          elif [ -n "${{ github.event.inputs.release_tag }}" ]; then
            # Use manual input
            TAG_NAME="${{ github.event.inputs.release_tag }}"
            VERSION="${TAG_NAME#v}"
          else
            # Use package.json version with build number
            BUILD_NUMBER=$(git rev-list --count HEAD)
            SHORT_HASH=$(git rev-parse --short=7 HEAD)
            PACKAGE_VERSION=$(node -p "require('./package.json').version")
            VERSION="${PACKAGE_VERSION}-build.${BUILD_NUMBER}"
            TAG_NAME="v${VERSION}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Version: $VERSION"
          echo "üè∑Ô∏è Tag: $TAG_NAME"

  # Windows build with proper whisper.cpp compilation
  build-windows:
    runs-on: windows-latest
    needs: determine-version

    strategy:
      matrix:
        arch: [x64]
        build_type: [Release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Fix package.json dependencies and update version
        shell: pwsh
        run: |
          $version = "${{ needs.determine-version.outputs.version }}"
          Write-Host "üè∑Ô∏è Setting version to: $version"
          
          # Read and update main package.json
          $packageJsonPath = "package.json"
          if (Test-Path $packageJsonPath) {
            $packageJson = Get-Content $packageJsonPath -Raw | ConvertFrom-Json
            
            # Ensure version property exists
            if (-not $packageJson.PSObject.Properties['version']) {
              $packageJson | Add-Member -MemberType NoteProperty -Name 'version' -Value $version
            } else {
              $packageJson.version = $version
            }
            
            # Fix electron dependency issue - move electron from dependencies to devDependencies
            if ($packageJson.dependencies -and $packageJson.dependencies.electron) {
              Write-Host "üîß Moving electron from dependencies to devDependencies"
              
              # Ensure devDependencies exists
              if (-not $packageJson.PSObject.Properties['devDependencies']) {
                $packageJson | Add-Member -MemberType NoteProperty -Name 'devDependencies' -Value @{}
              }
              
              # Move electron
              $electronVersion = $packageJson.dependencies.electron
              $packageJson.devDependencies.electron = $electronVersion
              $packageJson.dependencies.PSObject.Properties.Remove('electron')
              
              Write-Host "‚úÖ Moved electron $electronVersion to devDependencies"
            }
            
            $packageJson | ConvertTo-Json -Depth 100 | Set-Content $packageJsonPath
            Write-Host "‚úÖ Updated package.json version to: $version"
          } else {
            Write-Host "‚ùå package.json not found"
            exit 1
          }

      # Install dependencies
      - name: Install main dependencies
        run: npm install

      - name: Install renderer dependencies
        shell: pwsh
        run: |
          if (Test-Path "src/renderer/whisperdesk-ui") {
            Set-Location "src/renderer/whisperdesk-ui"
            
            # Update renderer package.json version if it exists
            if (Test-Path "package.json") {
              $version = "${{ needs.determine-version.outputs.version }}"
              $packageJson = Get-Content package.json -Raw | ConvertFrom-Json
              
              if (-not $packageJson.PSObject.Properties['version']) {
                $packageJson | Add-Member -MemberType NoteProperty -Name 'version' -Value $version
              } else {
                $packageJson.version = $version
              }
              
              $packageJson | ConvertTo-Json -Depth 100 | Set-Content package.json
              Write-Host "‚úÖ Updated renderer package.json version"
            }
            
            pnpm install --frozen-lockfile
            Set-Location "$env:GITHUB_WORKSPACE"
          } else {
            Write-Host "‚ö†Ô∏è Renderer directory not found, skipping"
          }

      # Build whisper.cpp from source with better approach
      - name: Build whisper.cpp for Windows
        shell: pwsh
        run: |
          Write-Host "üî® Building whisper.cpp for Windows..." -ForegroundColor Green
          
          # Clone official whisper.cpp repository
          git clone https://github.com/ggerganov/whisper.cpp.git C:\temp\whisper-build
          Set-Location C:\temp\whisper-build
          
          Write-Host "‚úÖ Cloned whisper.cpp repository"
          
          # Configure with MSVC (Release mode, shared libs for better compatibility)
          cmake -S . -B build -A ${{ matrix.arch }} `
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
            -DBUILD_SHARED_LIBS=ON `
            -DWHISPER_BUILD_TESTS=OFF `
            -DWHISPER_BUILD_EXAMPLES=ON
          
          Write-Host "‚úÖ Configured CMake for ${{ matrix.arch }}"
          
          # Build using MSBuild
          cmake --build build --config ${{ matrix.build_type }} --parallel 4
          
          Write-Host "‚úÖ Built whisper.cpp"
          
          # Find and verify the binaries
          $buildDir = "build\bin\${{ matrix.build_type }}"
          Write-Host "üîç Looking for binaries in: $buildDir"
          
          if (Test-Path "$buildDir\whisper-cli.exe") {
            $whisperBinary = "$buildDir\whisper-cli.exe"
            $binaryName = "whisper-cli.exe"
          } elseif (Test-Path "$buildDir\main.exe") {
            $whisperBinary = "$buildDir\main.exe"
            $binaryName = "main.exe"
          } else {
            Write-Host "‚ùå No suitable binary found"
            Get-ChildItem $buildDir -Filter "*.exe" | Format-Table Name, Length
            exit 1
          }
          
          # Verify binary size and functionality
          $fileInfo = Get-Item $whisperBinary
          $sizeKB = [math]::Round($fileInfo.Length / 1024, 1)
          Write-Host "üìä Found binary: $binaryName ($sizeKB KB)"
          
          if ($fileInfo.Length -lt 50KB) {
            Write-Host "‚ùå Binary too small, likely corrupted"
            exit 1
          }
          
          # Create target directory and copy files
          $targetDir = "$env:GITHUB_WORKSPACE\binaries"
          New-Item -ItemType Directory -Force -Path $targetDir | Out-Null
          
          # Copy main binary as whisper-cli.exe (consistent naming)
          Copy-Item $whisperBinary "$targetDir\whisper-cli.exe" -Force
          Write-Host "‚úÖ Copied binary: $binaryName -> whisper-cli.exe"
          
          # Copy all required DLLs
          $dlls = Get-ChildItem $buildDir -Filter "*.dll"
          foreach ($dll in $dlls) {
            Copy-Item $dll.FullName $targetDir -Force
            $dllSize = [math]::Round($dll.Length / 1024, 1)
            Write-Host "‚úÖ Copied DLL: $($dll.Name) ($dllSize KB)"
          }
          
          Write-Host "üìã Total files copied: $($dlls.Count + 1)"

      # Package Visual C++ Runtime
      - name: Package VC++ Runtime
        shell: pwsh
        run: |
          Write-Host "üì¶ Packaging Visual C++ Runtime..." -ForegroundColor Green
          
          $targetDir = "$env:GITHUB_WORKSPACE\binaries"
          
          # Download VC++ Redistributable
          $vcredistUrl = "https://aka.ms/vs/17/release/vc_redist.x64.exe"
          $vcredistPath = "$targetDir\vc_redist.x64.exe"
          
          try {
            Invoke-WebRequest -Uri $vcredistUrl -OutFile $vcredistPath -UseBasicParsing
            Write-Host "‚úÖ Downloaded VC++ Redistributable"
          } catch {
            Write-Host "‚ö†Ô∏è Failed to download VC++ Redistributable: $($_.Exception.Message)"
          }
          
          # Copy system runtime DLLs if available
          $systemDlls = @(
            "C:\Windows\System32\msvcp140.dll",
            "C:\Windows\System32\vcruntime140.dll",
            "C:\Windows\System32\vcruntime140_1.dll"
          )
          
          foreach ($dll in $systemDlls) {
            if (Test-Path $dll) {
              $dllName = Split-Path $dll -Leaf
              try {
                Copy-Item $dll "$targetDir\$dllName" -Force
                Write-Host "‚úÖ Copied runtime: $dllName"
              } catch {
                Write-Host "‚ö†Ô∏è Could not copy $dllName"
              }
            }
          }

      # Test the binary
      - name: Test whisper binary
        shell: pwsh
        run: |
          Write-Host "üîç Testing whisper binary..." -ForegroundColor Green
          
          $binaryPath = "binaries\whisper-cli.exe"
          
          if (-not (Test-Path $binaryPath)) {
            Write-Host "‚ùå Binary not found: $binaryPath"
            exit 1
          }
          
          $fileInfo = Get-Item $binaryPath
          $sizeKB = [math]::Round($fileInfo.Length / 1024, 1)
          Write-Host "üìä Binary size: $sizeKB KB"
          
          # Simple existence and size check (avoid execution issues in CI)
          if ($fileInfo.Length -gt 100KB) {
            Write-Host "‚úÖ Binary appears valid ($sizeKB KB)"
          } else {
            Write-Host "‚ùå Binary too small ($sizeKB KB)"
            exit 1
          }

      # Download tiny model
      - name: Download tiny model
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "models" | Out-Null
          Invoke-WebRequest -Uri "https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-tiny.bin" -OutFile "models/ggml-tiny.bin"

      # Build renderer
      - name: Build renderer
        shell: pwsh
        run: |
          if (Test-Path "src/renderer/whisperdesk-ui") {
            Set-Location "src/renderer/whisperdesk-ui"
            pnpm run build
            Set-Location "$env:GITHUB_WORKSPACE"
          } else {
            Write-Host "‚ö†Ô∏è Renderer directory not found, skipping"
          }

      # Build Electron app
      - name: Build Electron app
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
        run: |
          npx electron-builder --win --x64 --publish=never

      # Upload artifacts
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: WhisperDesk-windows-${{ matrix.arch }}
          path: |
            dist/*.exe
            dist/*.zip
          retention-days: 30

  # macOS build
  build-macos:
    runs-on: macos-latest
    needs: determine-version

    strategy:
      matrix:
        arch: [x64, arm64]
        build_type: [Release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: |
          brew update
          brew install cmake

      - name: Fix package.json dependencies and update version
        run: |
          VERSION="${{ needs.determine-version.outputs.version }}"
          echo "üè∑Ô∏è Setting version to: $VERSION"
          
          # Update main package.json
          if [ -f "package.json" ]; then
            # Read current package.json
            TEMP_FILE=$(mktemp)
            
            # Fix electron dependency and update version
            cat package.json | jq --arg version "$VERSION" '
              .version = $version |
              if .dependencies.electron then
                .devDependencies.electron = .dependencies.electron |
                del(.dependencies.electron)
              else
                .
              end
            ' > "$TEMP_FILE"
            
            mv "$TEMP_FILE" package.json
            echo "‚úÖ Updated package.json version and fixed electron dependency"
          else
            echo "‚ùå package.json not found"
            exit 1
          fi

      - name: Install main dependencies
        run: npm install

      - name: Install renderer dependencies
        run: |
          if [ -d "src/renderer/whisperdesk-ui" ]; then
            cd src/renderer/whisperdesk-ui
            
            # Update renderer package.json version if it exists
            if [ -f "package.json" ]; then
              VERSION="${{ needs.determine-version.outputs.version }}"
              cat package.json | jq --arg version "$VERSION" '.version = $version' > package.json.tmp
              mv package.json.tmp package.json
              echo "‚úÖ Updated renderer package.json version"
            fi
            
            pnpm install --frozen-lockfile
          else
            echo "‚ö†Ô∏è Renderer directory not found, skipping"
          fi

      # Build whisper.cpp for macOS with fixed architecture handling
      - name: Build whisper.cpp for macOS
        run: |
          echo "üî® Building whisper.cpp for macOS (${{ matrix.arch }})..."
          
          # Clone whisper.cpp
          git clone https://github.com/ggerganov/whisper.cpp.git /tmp/whisper-build
          cd /tmp/whisper-build
          
          # Configure for specific architecture with proper CPU targets
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            CMAKE_ARCH_FLAGS="-DCMAKE_OSX_ARCHITECTURES=arm64"
            CMAKE_CPU_FLAGS=""
          else
            CMAKE_ARCH_FLAGS="-DCMAKE_OSX_ARCHITECTURES=x86_64"
            # Use x86_64 instead of apple-m1 for x64 builds
            CMAKE_CPU_FLAGS="-DGGML_NATIVE=OFF"
          fi
          
          echo "Using CMAKE_ARCH_FLAGS: $CMAKE_ARCH_FLAGS"
          echo "Using CMAKE_CPU_FLAGS: $CMAKE_CPU_FLAGS"
          
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DWHISPER_BUILD_TESTS=OFF \
            -DWHISPER_BUILD_EXAMPLES=ON \
            $CMAKE_ARCH_FLAGS \
            $CMAKE_CPU_FLAGS
          
          cmake --build build --config ${{ matrix.build_type }} --parallel $(sysctl -n hw.logicalcpu)
          
          echo "‚úÖ Built whisper.cpp"
          
          # Find binary
          if [ -f "build/bin/whisper-cli" ]; then
            WHISPER_BINARY="build/bin/whisper-cli"
          elif [ -f "build/bin/main" ]; then
            WHISPER_BINARY="build/bin/main"
          else
            echo "‚ùå No suitable binary found"
            ls -la build/bin/
            exit 1
          fi
          
          # Verify and copy
          SIZE=$(stat -f%z "$WHISPER_BINARY")
          echo "üìä Found binary: $WHISPER_BINARY ($SIZE bytes)"
          
          if [ "$SIZE" -lt 50000 ]; then
            echo "‚ùå Binary too small"
            exit 1
          fi
          
          mkdir -p "$GITHUB_WORKSPACE/binaries"
          cp "$WHISPER_BINARY" "$GITHUB_WORKSPACE/binaries/whisper-cli"
          chmod +x "$GITHUB_WORKSPACE/binaries/whisper-cli"
          
          echo "‚úÖ Copied binary to whisper-cli"

      # Download tiny model
      - name: Download tiny model
        run: |
          mkdir -p models
          curl -L -o models/ggml-tiny.bin https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-tiny.bin

      # Build renderer
      - name: Build renderer
        run: |
          if [ -d "src/renderer/whisperdesk-ui" ]; then
            cd src/renderer/whisperdesk-ui
            pnpm run build
          else
            echo "‚ö†Ô∏è Renderer directory not found, skipping"
          fi

      # Build Electron app
      - name: Build Electron app
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            npx electron-builder --mac --arm64 --publish=never
          else
            npx electron-builder --mac --x64 --publish=never
          fi

      # Upload artifacts
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: WhisperDesk-macos-${{ matrix.arch }}
          path: |
            dist/*.dmg
            dist/*.zip
          retention-days: 30

  # Linux build
  build-linux:
    runs-on: ubuntu-22.04
    needs: determine-version

    strategy:
      matrix:
        arch: [x64]
        build_type: [Release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libasound2-dev fuse libfuse2

      - name: Fix package.json dependencies and update version
        run: |
          VERSION="${{ needs.determine-version.outputs.version }}"
          echo "üè∑Ô∏è Setting version to: $VERSION"
          
          # Update main package.json
          if [ -f "package.json" ]; then
            # Read current package.json
            TEMP_FILE=$(mktemp)
            
            # Fix electron dependency and update version
            cat package.json | jq --arg version "$VERSION" '
              .version = $version |
              if .dependencies.electron then
                .devDependencies.electron = .dependencies.electron |
                del(.dependencies.electron)
              else
                .
              end
            ' > "$TEMP_FILE"
            
            mv "$TEMP_FILE" package.json
            echo "‚úÖ Updated package.json version and fixed electron dependency"
          else
            echo "‚ùå package.json not found"
            exit 1
          fi

      - name: Install main dependencies
        run: npm install

      - name: Install renderer dependencies
        run: |
          if [ -d "src/renderer/whisperdesk-ui" ]; then
            cd src/renderer/whisperdesk-ui
            
            # Update renderer package.json version if it exists
            if [ -f "package.json" ]; then
              VERSION="${{ needs.determine-version.outputs.version }}"
              cat package.json | jq --arg version "$VERSION" '.version = $version' > package.json.tmp
              mv package.json.tmp package.json
              echo "‚úÖ Updated renderer package.json version"
            fi
            
            pnpm install --frozen-lockfile
          else
            echo "‚ö†Ô∏è Renderer directory not found, skipping"
          fi

      # Build whisper.cpp for Linux
      - name: Build whisper.cpp for Linux
        run: |
          echo "üî® Building whisper.cpp for Linux..."
          
          # Clone whisper.cpp
          git clone https://github.com/ggerganov/whisper.cpp.git /tmp/whisper-build
          cd /tmp/whisper-build
          
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DWHISPER_BUILD_TESTS=OFF \
            -DWHISPER_BUILD_EXAMPLES=ON
          
          cmake --build build --config ${{ matrix.build_type }} --parallel $(nproc)
          
          echo "‚úÖ Built whisper.cpp"
          
          # Find binary
          if [ -f "build/bin/whisper-cli" ]; then
            WHISPER_BINARY="build/bin/whisper-cli"
          elif [ -f "build/bin/main" ]; then
            WHISPER_BINARY="build/bin/main"
          else
            echo "‚ùå No suitable binary found"
            ls -la build/bin/
            exit 1
          fi
          
          # Verify and copy
          SIZE=$(stat -c%s "$WHISPER_BINARY")
          echo "üìä Found binary: $WHISPER_BINARY ($SIZE bytes)"
          
          if [ "$SIZE" -lt 50000 ]; then
            echo "‚ùå Binary too small"
            exit 1
          fi
          
          mkdir -p "$GITHUB_WORKSPACE/binaries"
          cp "$WHISPER_BINARY" "$GITHUB_WORKSPACE/binaries/whisper-cli"
          chmod +x "$GITHUB_WORKSPACE/binaries/whisper-cli"
          
          echo "‚úÖ Copied binary to whisper-cli"

      # Download tiny model
      - name: Download tiny model
        run: |
          mkdir -p models
          curl -L -o models/ggml-tiny.bin https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-tiny.bin

      # Build renderer
      - name: Build renderer
        run: |
          if [ -d "src/renderer/whisperdesk-ui" ]; then
            cd src/renderer/whisperdesk-ui
            pnpm run build
          else
            echo "‚ö†Ô∏è Renderer directory not found, skipping"
          fi

      # Build Electron app
      - name: Build Electron app
        run: |
          npx electron-builder --linux --x64 --publish=never

      # Upload artifacts
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: WhisperDesk-linux-${{ matrix.arch }}
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
          retention-days: 30

  # Create release
  create-release:
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.create_release == 'true'
    needs: [determine-version, build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest

    permissions:
      contents: write
      actions: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Organize release files
        run: |
          echo "üîß Organizing release files..."
          mkdir -p release-files
          
          # Copy all artifacts to release directory with organized naming
          find artifacts/ -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.zip" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.tar.gz" \) -exec cp {} release-files/ \;
          
          echo "üìã Release files:"
          ls -la release-files/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-files/*
          draft: false
          prerelease: ${{ contains(needs.determine-version.outputs.version, 'build') }}
          generate_release_notes: true
          name: "WhisperDesk Enhanced ${{ needs.determine-version.outputs.tag_name }}"
          tag_name: ${{ needs.determine-version.outputs.tag_name }}
          body: |
            ## WhisperDesk Enhanced ${{ needs.determine-version.outputs.tag_name }}
            
            üéâ **New Release Available!**
            
            ### üì¶ Download Options:
            
            **üñ•Ô∏è Windows (64-bit)**:
            - `.exe` - Installer (recommended)
            - `.zip` - Portable version
            
            **üçé macOS**:
            - `.dmg` - Disk image (recommended)
            - `.zip` - Portable version
            - Available for both Intel (x64) and Apple Silicon (arm64)
            
            **üêß Linux**:
            - `.AppImage` - Portable (recommended)
            - `.deb` - Debian/Ubuntu package
            - `.rpm` - Red Hat/Fedora package
            - `.tar.gz` - Generic archive
            
            ### ‚ú® Features:
            - üéµ Native whisper.cpp integration with whisper-cli binary
            - üì± Cross-platform support (Windows, macOS, Linux)
            - üîÑ Real-time progress tracking
            - üíæ Persistent state management
            - üéØ Multiple model support (Tiny, Base, Small, Medium, Large)
            - üìÅ Drag & drop file upload
            - üé® Modern, responsive UI
            
            ### üöÄ Quick Start:
            1. **Download** the appropriate file for your platform
            2. **Install** and launch WhisperDesk
            3. **Download a model** in the Models tab (start with Tiny)
            4. **Start transcribing** your audio files!
            
            ### üîß Troubleshooting:
            - **Windows**: If you get DLL errors, the installer includes `vc_redist.x64.exe`
            - **macOS**: Right-click ‚Üí Open if blocked by Gatekeeper
            - **Linux**: `chmod +x *.AppImage` to make executable
            
            ---
            
            **Technical Details:**
            - Version: ${{ needs.determine-version.outputs.version }}
            - Binary: whisper-cli (latest whisper.cpp)
            - Built with: CMake + electron-builder
            
            Auto-generated release notes below ‚¨áÔ∏è
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}